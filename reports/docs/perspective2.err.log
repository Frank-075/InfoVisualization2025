Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/leonardbus/Library/Python/3.13/lib/python/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/base_events.py", line 721, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

iso_map = {'AT':'AUT','BE':'BEL','BG':'BGR','HR':'HRV','CY':'CYP','CZ':'CZE','DK':'DNK','EE':'EST',
           'FI':'FIN','FR':'FRA','DE':'DEU','EL':'GRC','HU':'HUN','IE':'IRL','IT':'ITA','LV':'LVA',
           'LT':'LTU','LU':'LUX','MT':'MLT','NL':'NLD','PL':'POL','PT':'PRT','RO':'ROU','SK':'SVK',
           'SI':'SVN','ES':'ESP','SE':'SWE','NO':'NOR','IS':'ISL','CH':'CHE','UK':'GBR'}

df['iso3'] = df.geo.map(iso_map)
rows = df.dropna(subset=['iso3'])

years = sorted(rows.year.unique())
zmax = rows.evShare.quantile(0.98)

# Elektrische kleurenschema ge√Ønspireerd op energie/elektriciteit
electric_colorscale = [
    [0.0, '#0a0a0a'],      # Zwart (geen elektriciteit)
    [0.1, '#1e3a8a'],      # Donkerblauw
    [0.2, '#3b82f6'],      # Blauw 
    [0.3, '#06b6d4'],      # Cyaan
    [0.4, '#10b981'],      # Groen
    [0.5, '#84cc16'],      # Lime groen
    [0.6, '#eab308'],      # Geel
    [0.7, '#f59e0b'],      # Oranje
    [0.8, '#ef4444'],      # Rood
    [0.9, '#ec4899'],      # Roze
    [1.0, '#ffffff']       # Wit (hoogste energie)
]

frames = []
for yr in years:
    sub = rows[rows.year == yr]
    frames.append(go.Frame(name=str(yr),
                           data=[go.Choropleth(
                               locations=sub.iso3,
                               z=sub.evShare,
                               text=sub.geo,
                               colorscale=electric_colorscale,
                               zmin=0, zmax=zmax,
                                                               colorbar=dict(
                                    title="‚ö° EV Adoptie %",
                                    title_font=dict(size=14),
                                    ticksuffix="%"
                                ),
                               hovertemplate='üîå %{text}: <b>%{z:.1f}%</b> EV-aandeel<extra></extra>')]))

fig_map = go.Figure(
    data=frames[0].data,
    frames=frames,
    layout=go.Layout(
        title=dict(
            text='‚ö° Elektrische Voertuigen in Europa - Energie in Beweging üîã',
            font=dict(size=20, color='#1e3a8a'),
            x=0.5
        ),
        geo=dict(
            scope='europe', 
            projection_type='natural earth',
            showframe=False, 
            showcountries=True,
            countrycolor='rgb(204, 204, 204)',
            bgcolor='rgba(0,0,0,0.05)'
        ),
        paper_bgcolor='rgb(248, 250, 252)',
        plot_bgcolor='rgb(248, 250, 252)',
        # Alleen Play/Pause knoppen - geen slider
        updatemenus=[dict(
            type="buttons",
            direction="left",
            buttons=list([
                dict(
                    args=[None, {"frame": {"duration": 1000, "redraw": False},
                                "fromcurrent": False,
                                "transition": {"duration": 400, "easing": "cubic-in-out"},
                                "mode": "afterall"}],
                    label="‚ö° Energie Afspelen",
                    method="animate",
                    bgcolor='#10b981',
                    bordercolor='#059669',
                    font=dict(color='white', size=12)
                ),
                dict(
                    args=[[None], {"frame": {"duration": 0, "redraw": False},
                                  "mode": "immediate",
                                  "transition": {"duration": 0}}],
                    label="‚è∏Ô∏è Pauzeren",
                    method="animate",
                    bgcolor='#ef4444',
                    bordercolor='#dc2626',
                    font=dict(color='white', size=12)
                )
            ]),
            pad={"r": 10, "t": 90, "l": 10},
            showactive=False,
            x=0.5,
            xanchor="center",
            y=1.02,
            yanchor="bottom"
        )],
        # Jaarindicator toevoegen
        annotations=[
            dict(
                text=f"üìÖ Jaar: {years[0]}",
                showarrow=False,
                xref="paper", yref="paper",
                x=0.02, y=0.98,
                xanchor="left", yanchor="top",
                bgcolor="rgba(255,255,255,0.8)",
                bordercolor="#1e3a8a",
                borderwidth=2,
                font=dict(size=16, color="#1e3a8a")
            )
        ]
    ))

# Convert to HTML en JavaScript voor automatische start + loop
html_str = fig_map.to_html(include_plotlyjs=True, div_id="ev-energy-map")

# Geavanceerde JavaScript voor automatische start en oneindige loop
enhanced_script = """
<style>
/* Elektrische styling voor de kaart container */
#ev-energy-map {
    border: 3px solid #3b82f6;
    border-radius: 15px;
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    padding: 10px;
    margin: 20px 0;
}

/* Glow effect voor knoppen */
.updatemenu-button {
    transition: all 0.3s ease;
}

.updatemenu-button:hover {
    box-shadow: 0 0 15px rgba(16, 185, 129, 0.5) !important;
    transform: translateY(-2px);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let isPlaying = false;
    let currentYear = 0;
    const years = """ + str(years) + """;
    
    // Functie om jaar-annotatie bij te werken
    function updateYearAnnotation(year) {
        Plotly.relayout('ev-energy-map', {
            'annotations[0].text': `üìÖ Jaar: ${year} ‚ö°`
        });
    }
    
    // Automatische loop functie
    function autoLoop() {
        if (!isPlaying) return;
        
        const yearStr = years[currentYear].toString();
        
        // Animeer naar het huidige jaar
        Plotly.animate('ev-energy-map', [yearStr], {
            frame: {duration: 800, redraw: false},
            transition: {duration: 400, easing: 'cubic-in-out'},
            mode: 'immediate'
        }).then(function() {
            // Update jaar indicator
            updateYearAnnotation(years[currentYear]);
            
            // Ga naar volgend jaar of begin opnieuw
            currentYear = (currentYear + 1) % years.length;
            
            // Continue de loop als nog steeds aan het spelen
            if (isPlaying) {
                setTimeout(autoLoop, 1200); // Wacht 1.2 seconden tussen jaren
            }
        });
    }
    
    // Start automatisch na 2 seconden
    setTimeout(function() {
        isPlaying = true;
        currentYear = 0;
        autoLoop();
    }, 2000);
    
    // Event listeners voor de knoppen
    setTimeout(function() {
        const buttons = document.querySelectorAll('#ev-energy-map .updatemenu-button');
        if (buttons.length >= 2) {
            // Play knop
            buttons[0].addEventListener('click', function() {
                if (!isPlaying) {
                    isPlaying = true;
                    autoLoop();
                }
            });
            
            // Pause knop
            buttons[1].addEventListener('click', function() {
                isPlaying = false;
            });
        }
    }, 1000);
    
    // Voeg elektrische particle effecten toe (optioneel)
    function addElectricEffect() {
        const mapContainer = document.getElementById('ev-energy-map');
        if (mapContainer) {
            mapContainer.style.position = 'relative';
            mapContainer.style.overflow = 'hidden';
        }
    }
    
    setTimeout(addElectricEffect, 1500);
});
</script>
"""

# Combineren van HTML en enhanced script
full_html = html_str + enhanced_script
HTML(full_html)

------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 47[39m
[32m     29[39m     sub = rows[rows.year == yr]
[32m     30[39m     frames.append(go.Frame(name=[38;5;28mstr[39m(yr),
[32m     31[39m                            data=[go.Choropleth(
[32m     32[39m                                locations=sub.iso3,
[32m   (...)[39m[32m     41[39m                                 ),
[32m     42[39m                                hovertemplate=[33m'[39m[33müîå [39m[33m%[39m[38;5;132;01m{text}[39;00m[33m: <b>[39m[33m%[39m[38;5;132;01m{z:.1f}[39;00m[33m%[39m[33m</b> EV-aandeel<extra></extra>[39m[33m'[39m)]))
[32m     44[39m fig_map = go.Figure(
[32m     45[39m     data=frames[[32m0[39m].data,
[32m     46[39m     frames=frames,
[32m---> [39m[32m47[39m     layout=[43mgo[49m[43m.[49m[43mLayout[49m[43m([49m
[32m     48[39m [43m        [49m[43mtitle[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m
[32m     49[39m [43m            [49m[43mtext[49m[43m=[49m[33;43m'[39;49m[33;43m‚ö° Elektrische Voertuigen in Europa - Energie in Beweging üîã[39;49m[33;43m'[39;49m[43m,[49m
[32m     50[39m [43m            [49m[43mfont[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43msize[49m[43m=[49m[32;43m20[39;49m[43m,[49m[43m [49m[43mcolor[49m[43m=[49m[33;43m'[39;49m[33;43m#1e3a8a[39;49m[33;43m'[39;49m[43m)[49m[43m,[49m
[32m     51[39m [43m            [49m[43mx[49m[43m=[49m[32;43m0.5[39;49m
[32m     52[39m [43m        [49m[43m)[49m[43m,[49m
[32m     53[39m [43m        [49m[43mgeo[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m
[32m     54[39m [43m            [49m[43mscope[49m[43m=[49m[33;43m'[39;49m[33;43meurope[39;49m[33;43m'[39;49m[43m,[49m[43m [49m
[32m     55[39m [43m            [49m[43mprojection_type[49m[43m=[49m[33;43m'[39;49m[33;43mnatural earth[39;49m[33;43m'[39;49m[43m,[49m
[32m     56[39m [43m            [49m[43mshowframe[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m
[32m     57[39m [43m            [49m[43mshowcountries[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
[32m     58[39m [43m            [49m[43mcountrycolor[49m[43m=[49m[33;43m'[39;49m[33;43mrgb(204, 204, 204)[39;49m[33;43m'[39;49m[43m,[49m
[32m     59[39m [43m            [49m[43mbgcolor[49m[43m=[49m[33;43m'[39;49m[33;43mrgba(0,0,0,0.05)[39;49m[33;43m'[39;49m
[32m     60[39m [43m        [49m[43m)[49m[43m,[49m
[32m     61[39m [43m        [49m[43mpaper_bgcolor[49m[43m=[49m[33;43m'[39;49m[33;43mrgb(248, 250, 252)[39;49m[33;43m'[39;49m[43m,[49m
[32m     62[39m [43m        [49m[43mplot_bgcolor[49m[43m=[49m[33;43m'[39;49m[33;43mrgb(248, 250, 252)[39;49m[33;43m'[39;49m[43m,[49m
[32m     63[39m [43m        [49m[38;5;66;43;03m# Alleen Play/Pause knoppen - geen slider[39;49;00m
[32m     64[39m [43m        [49m[43mupdatemenus[49m[43m=[49m[43m[[49m[38;5;28;43mdict[39;49m[43m([49m
[32m     65[39m [43m            [49m[38;5;28;43mtype[39;49m[43m=[49m[33;43m"[39;49m[33;43mbuttons[39;49m[33;43m"[39;49m[43m,[49m
[32m     66[39m [43m            [49m[43mdirection[49m[43m=[49m[33;43m"[39;49m[33;43mleft[39;49m[33;43m"[39;49m[43m,[49m
[32m     67[39m [43m            [49m[43mbuttons[49m[43m=[49m[38;5;28;43mlist[39;49m[43m([49m[43m[[49m
[32m     68[39m [43m                [49m[38;5;28;43mdict[39;49m[43m([49m
[32m     69[39m [43m                    [49m[43margs[49m[43m=[49m[43m[[49m[38;5;28;43;01mNone[39;49;00m[43m,[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mframe[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mduration[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m1000[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mredraw[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m}[49m[43m,[49m
[32m     70[39m [43m                                [49m[33;43m"[39;49m[33;43mfromcurrent[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m     71[39m [43m                                [49m[33;43m"[39;49m[33;43mtransition[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mduration[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m400[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43measing[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[33;43m"[39;49m[33;43mcubic-in-out[39;49m[33;43m"[39;49m[43m}[49m[43m,[49m
[32m     72[39m [43m                                [49m[33;43m"[39;49m[33;43mmode[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[33;43m"[39;49m[33;43mafterall[39;49m[33;43m"[39;49m[43m}[49m[43m][49m[43m,[49m
[32m     73[39m [43m                    [49m[43mlabel[49m[43m=[49m[33;43m"[39;49m[33;43m‚ö° Energie Afspelen[39;49m[33;43m"[39;49m[43m,[49m
[32m     74[39m [43m                    [49m[43mmethod[49m[43m=[49m[33;43m"[39;49m[33;43manimate[39;49m[33;43m"[39;49m[43m,[49m
[32m     75[39m [43m                    [49m[43mbgcolor[49m[43m=[49m[33;43m'[39;49m[33;43m#10b981[39;49m[33;43m'[39;49m[43m,[49m
[32m     76[39m [43m                    [49m[43mbordercolor[49m[43m=[49m[33;43m'[39;49m[33;43m#059669[39;49m[33;43m'[39;49m[43m,[49m
[32m     77[39m [43m                    [49m[43mfont[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43mcolor[49m[43m=[49m[33;43m'[39;49m[33;43mwhite[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43msize[49m[43m=[49m[32;43m12[39;49m[43m)[49m
[32m     78[39m [43m                [49m[43m)[49m[43m,[49m
[32m     79[39m [43m                [49m[38;5;28;43mdict[39;49m[43m([49m
[32m     80[39m [43m                    [49m[43margs[49m[43m=[49m[43m[[49m[43m[[49m[38;5;28;43;01mNone[39;49;00m[43m][49m[43m,[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mframe[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mduration[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m0[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mredraw[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m}[49m[43m,[49m
[32m     81[39m [43m                                  [49m[33;43m"[39;49m[33;43mmode[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[33;43m"[39;49m[33;43mimmediate[39;49m[33;43m"[39;49m[43m,[49m
[32m     82[39m [43m                                  [49m[33;43m"[39;49m[33;43mtransition[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[43m{[49m[33;43m"[39;49m[33;43mduration[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m0[39;49m[43m}[49m[43m}[49m[43m][49m[43m,[49m
[32m     83[39m [43m                    [49m[43mlabel[49m[43m=[49m[33;43m"[39;49m[33;43m‚è∏Ô∏è Pauzeren[39;49m[33;43m"[39;49m[43m,[49m
[32m     84[39m [43m                    [49m[43mmethod[49m[43m=[49m[33;43m"[39;49m[33;43manimate[39;49m[33;43m"[39;49m[43m,[49m
[32m     85[39m [43m                    [49m[43mbgcolor[49m[43m=[49m[33;43m'[39;49m[33;43m#ef4444[39;49m[33;43m'[39;49m[43m,[49m
[32m     86[39m [43m                    [49m[43mbordercolor[49m[43m=[49m[33;43m'[39;49m[33;43m#dc2626[39;49m[33;43m'[39;49m[43m,[49m
[32m     87[39m [43m                    [49m[43mfont[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43mcolor[49m[43m=[49m[33;43m'[39;49m[33;43mwhite[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43msize[49m[43m=[49m[32;43m12[39;49m[43m)[49m
[32m     88[39m [43m                [49m[43m)[49m
[32m     89[39m [43m            [49m[43m][49m[43m)[49m[43m,[49m
[32m     90[39m [43m            [49m[43mpad[49m[43m=[49m[43m{[49m[33;43m"[39;49m[33;43mr[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m10[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mt[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m90[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43ml[39;49m[33;43m"[39;49m[43m:[49m[43m [49m[32;43m10[39;49m[43m}[49m[43m,[49m
[32m     91[39m [43m            [49m[43mshowactive[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m     92[39m [43m            [49m[43mx[49m[43m=[49m[32;43m0.5[39;49m[43m,[49m
[32m     93[39m [43m            [49m[43mxanchor[49m[43m=[49m[33;43m"[39;49m[33;43mcenter[39;49m[33;43m"[39;49m[43m,[49m
[32m     94[39m [43m            [49m[43my[49m[43m=[49m[32;43m1.02[39;49m[43m,[49m
[32m     95[39m [43m            [49m[43myanchor[49m[43m=[49m[33;43m"[39;49m[33;43mbottom[39;49m[33;43m"[39;49m
[32m     96[39m [43m        [49m[43m)[49m[43m][49m[43m,[49m
[32m     97[39m [43m        [49m[38;5;66;43;03m# Jaarindicator toevoegen[39;49;00m
[32m     98[39m [43m        [49m[43mannotations[49m[43m=[49m[43m[[49m
[32m     99[39m [43m            [49m[38;5;28;43mdict[39;49m[43m([49m
[32m    100[39m [43m                [49m[43mtext[49m[43m=[49m[33;43mf[39;49m[33;43m"[39;49m[33;43müìÖ Jaar: [39;49m[38;5;132;43;01m{[39;49;00m[43myears[49m[43m[[49m[32;43m0[39;49m[43m][49m[38;5;132;43;01m}[39;49;00m[33;43m"[39;49m[43m,[49m
[32m    101[39m [43m                [49m[43mshowarrow[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m    102[39m [43m                [49m[43mxref[49m[43m=[49m[33;43m"[39;49m[33;43mpaper[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43myref[49m[43m=[49m[33;43m"[39;49m[33;43mpaper[39;49m[33;43m"[39;49m[43m,[49m
[32m    103[39m [43m                [49m[43mx[49m[43m=[49m[32;43m0.02[39;49m[43m,[49m[43m [49m[43my[49m[43m=[49m[32;43m0.98[39;49m[43m,[49m
[32m    104[39m [43m                [49m[43mxanchor[49m[43m=[49m[33;43m"[39;49m[33;43mleft[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43myanchor[49m[43m=[49m[33;43m"[39;49m[33;43mtop[39;49m[33;43m"[39;49m[43m,[49m
[32m    105[39m [43m                [49m[43mbgcolor[49m[43m=[49m[33;43m"[39;49m[33;43mrgba(255,255,255,0.8)[39;49m[33;43m"[39;49m[43m,[49m
[32m    106[39m [43m                [49m[43mbordercolor[49m[43m=[49m[33;43m"[39;49m[33;43m#1e3a8a[39;49m[33;43m"[39;49m[43m,[49m
[32m    107[39m [43m                [49m[43mborderwidth[49m[43m=[49m[32;43m2[39;49m[43m,[49m
[32m    108[39m [43m                [49m[43mfont[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43msize[49m[43m=[49m[32;43m16[39;49m[43m,[49m[43m [49m[43mcolor[49m[43m=[49m[33;43m"[39;49m[33;43m#1e3a8a[39;49m[33;43m"[39;49m[43m)[49m
[32m    109[39m [43m            [49m[43m)[49m
[32m    110[39m [43m        [49m[43m][49m
[32m    111[39m [43m    [49m[43m)[49m)
[32m    113[39m [38;5;66;03m# Convert to HTML en JavaScript voor automatische start + loop[39;00m
[32m    114[39m html_str = fig_map.to_html(include_plotlyjs=[38;5;28;01mTrue[39;00m, div_id=[33m"[39m[33mev-energy-map[39m[33m"[39m)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/graph_objs/_layout.py:3510[39m, in [36mLayout.__init__[39m[34m(self, arg, activeselection, activeshape, annotations, annotationdefaults, autosize, autotypenumbers, barcornerradius, bargap, bargroupgap, barmode, barnorm, boxgap, boxgroupgap, boxmode, calendar, clickmode, coloraxis, colorscale, colorway, computed, datarevision, dragmode, editrevision, extendfunnelareacolors, extendiciclecolors, extendpiecolors, extendsunburstcolors, extendtreemapcolors, font, funnelareacolorway, funnelgap, funnelgroupgap, funnelmode, geo, grid, height, hiddenlabels, hiddenlabelssrc, hidesources, hoverdistance, hoverlabel, hovermode, hoversubplots, iciclecolorway, images, imagedefaults, legend, map, mapbox, margin, meta, metasrc, minreducedheight, minreducedwidth, modebar, newselection, newshape, paper_bgcolor, piecolorway, plot_bgcolor, polar, scattergap, scattermode, scene, selectdirection, selectionrevision, selections, selectiondefaults, separators, shapes, shapedefaults, showlegend, sliders, sliderdefaults, smith, spikedistance, sunburstcolorway, template, ternary, title, transition, treemapcolorway, uirevision, uniformtext, updatemenus, updatemenudefaults, violingap, violingroupgap, violinmode, waterfallgap, waterfallgroupgap, waterfallmode, width, xaxis, yaxis, **kwargs)[39m
[32m   3508[39m [38;5;28mself[39m._set_property([33m"[39m[33muirevision[39m[33m"[39m, arg, uirevision)
[32m   3509[39m [38;5;28mself[39m._set_property([33m"[39m[33muniformtext[39m[33m"[39m, arg, uniformtext)
[32m-> [39m[32m3510[39m [38;5;28;43mself[39;49m[43m.[49m[43m_set_property[49m[43m([49m[33;43m"[39;49m[33;43mupdatemenus[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mupdatemenus[49m[43m)[49m
[32m   3511[39m [38;5;28mself[39m._set_property([33m"[39m[33mupdatemenudefaults[39m[33m"[39m, arg, updatemenudefaults)
[32m   3512[39m [38;5;28mself[39m._set_property([33m"[39m[33mviolingap[39m[33m"[39m, arg, violingap)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:4422[39m, in [36mBasePlotlyType._set_property[39m[34m(self, name, arg, provided)[39m
[32m   4416[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_set_property[39m([38;5;28mself[39m, name, arg, provided):
[32m   4417[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m   4418[39m [33;03m    Initialize a property of this object using the provided value[39;00m
[32m   4419[39m [33;03m    or a value popped from the arguments dictionary. If neither[39;00m
[32m   4420[39m [33;03m    is available, do not set the property.[39;00m
[32m   4421[39m [33;03m    """[39;00m
[32m-> [39m[32m4422[39m     [43m_set_property_provided_value[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mname[49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mprovided[49m[43m)[49m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:398[39m, in [36m_set_property_provided_value[39m[34m(obj, name, arg, provided)[39m
[32m    396[39m val = provided [38;5;28;01mif[39;00m provided [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m val
[32m    397[39m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m398[39m     [43mobj[49m[43m[[49m[43mname[49m[43m][49m = val

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:5990[39m, in [36mBaseLayoutType.__setitem__[39m[34m(self, prop, value)[39m
[32m   5987[39m match = [38;5;28mself[39m._subplot_re_match(prop)
[32m   5988[39m [38;5;28;01mif[39;00m match [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m   5989[39m     [38;5;66;03m# Set as ordinary property[39;00m
[32m-> [39m[32m5990[39m     [38;5;28;43msuper[39;49m[43m([49m[43mBaseLayoutHierarchyType[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[43m.[49m[34;43m__setitem__[39;49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[32m   5991[39m [38;5;28;01melse[39;00m:
[32m   5992[39m     [38;5;66;03m# Set as subplotid property[39;00m
[32m   5993[39m     [38;5;28mself[39m._set_subplotid_prop(prop, value)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:4948[39m, in [36mBasePlotlyType.__setitem__[39m[34m(self, prop, value)[39m
[32m   4946[39m [38;5;66;03m# ### Handle compound array property ###[39;00m
[32m   4947[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):
[32m-> [39m[32m4948[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_set_array_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[32m   4950[39m [38;5;66;03m# ### Handle simple property ###[39;00m
[32m   4951[39m [38;5;28;01melse[39;00m:
[32m   4952[39m     [38;5;28mself[39m._set_prop(prop, value)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:5429[39m, in [36mBasePlotlyType._set_array_prop[39m[34m(self, prop, val)[39m
[32m   5426[39m [38;5;66;03m# Import value[39;00m
[32m   5427[39m [38;5;66;03m# ------------[39;00m
[32m   5428[39m validator = [38;5;28mself[39m._get_validator(prop)
[32m-> [39m[32m5429[39m val = [43mvalidator[49m[43m.[49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43m_skip_invalid[49m[43m)[49m
[32m   5431[39m [38;5;66;03m# Save deep copies of current and new states[39;00m
[32m   5432[39m [38;5;66;03m# ------------------------------------------[39;00m
[32m   5433[39m curr_val = [38;5;28mself[39m._compound_array_props.get(prop, [38;5;28;01mNone[39;00m)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_plotly_utils/basevalidators.py:2577[39m, in [36mCompoundArrayValidator.validate_coerce[39m[34m(self, v, skip_invalid)[39m
[32m   2575[39m     res.append([38;5;28mself[39m.data_class(v_el))
[32m   2576[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v_el, [38;5;28mdict[39m):
[32m-> [39m[32m2577[39m     res.append([38;5;28;43mself[39;49m[43m.[49m[43mdata_class[49m[43m([49m[43mv_el[49m[43m,[49m[43m [49m[43mskip_invalid[49m[43m=[49m[43mskip_invalid[49m[43m)[49m)
[32m   2578[39m [38;5;28;01melse[39;00m:
[32m   2579[39m     [38;5;28;01mif[39;00m skip_invalid:

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/graph_objs/layout/_updatemenu.py:620[39m, in [36mUpdatemenu.__init__[39m[34m(self, arg, active, bgcolor, bordercolor, borderwidth, buttons, buttondefaults, direction, font, name, pad, showactive, templateitemname, type, visible, x, xanchor, y, yanchor, **kwargs)[39m
[32m    618[39m [38;5;28mself[39m._set_property([33m"[39m[33mbordercolor[39m[33m"[39m, arg, bordercolor)
[32m    619[39m [38;5;28mself[39m._set_property([33m"[39m[33mborderwidth[39m[33m"[39m, arg, borderwidth)
[32m--> [39m[32m620[39m [38;5;28;43mself[39;49m[43m.[49m[43m_set_property[49m[43m([49m[33;43m"[39;49m[33;43mbuttons[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mbuttons[49m[43m)[49m
[32m    621[39m [38;5;28mself[39m._set_property([33m"[39m[33mbuttondefaults[39m[33m"[39m, arg, buttondefaults)
[32m    622[39m [38;5;28mself[39m._set_property([33m"[39m[33mdirection[39m[33m"[39m, arg, direction)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:4422[39m, in [36mBasePlotlyType._set_property[39m[34m(self, name, arg, provided)[39m
[32m   4416[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_set_property[39m([38;5;28mself[39m, name, arg, provided):
[32m   4417[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m   4418[39m [33;03m    Initialize a property of this object using the provided value[39;00m
[32m   4419[39m [33;03m    or a value popped from the arguments dictionary. If neither[39;00m
[32m   4420[39m [33;03m    is available, do not set the property.[39;00m
[32m   4421[39m [33;03m    """[39;00m
[32m-> [39m[32m4422[39m     [43m_set_property_provided_value[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mname[49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mprovided[49m[43m)[49m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:398[39m, in [36m_set_property_provided_value[39m[34m(obj, name, arg, provided)[39m
[32m    396[39m val = provided [38;5;28;01mif[39;00m provided [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m val
[32m    397[39m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m398[39m     [43mobj[49m[43m[[49m[43mname[49m[43m][49m = val

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:4948[39m, in [36mBasePlotlyType.__setitem__[39m[34m(self, prop, value)[39m
[32m   4946[39m [38;5;66;03m# ### Handle compound array property ###[39;00m
[32m   4947[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):
[32m-> [39m[32m4948[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_set_array_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[32m   4950[39m [38;5;66;03m# ### Handle simple property ###[39;00m
[32m   4951[39m [38;5;28;01melse[39;00m:
[32m   4952[39m     [38;5;28mself[39m._set_prop(prop, value)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:5429[39m, in [36mBasePlotlyType._set_array_prop[39m[34m(self, prop, val)[39m
[32m   5426[39m [38;5;66;03m# Import value[39;00m
[32m   5427[39m [38;5;66;03m# ------------[39;00m
[32m   5428[39m validator = [38;5;28mself[39m._get_validator(prop)
[32m-> [39m[32m5429[39m val = [43mvalidator[49m[43m.[49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43m_skip_invalid[49m[43m)[49m
[32m   5431[39m [38;5;66;03m# Save deep copies of current and new states[39;00m
[32m   5432[39m [38;5;66;03m# ------------------------------------------[39;00m
[32m   5433[39m curr_val = [38;5;28mself[39m._compound_array_props.get(prop, [38;5;28;01mNone[39;00m)

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/_plotly_utils/basevalidators.py:2577[39m, in [36mCompoundArrayValidator.validate_coerce[39m[34m(self, v, skip_invalid)[39m
[32m   2575[39m     res.append([38;5;28mself[39m.data_class(v_el))
[32m   2576[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v_el, [38;5;28mdict[39m):
[32m-> [39m[32m2577[39m     res.append([38;5;28;43mself[39;49m[43m.[49m[43mdata_class[49m[43m([49m[43mv_el[49m[43m,[49m[43m [49m[43mskip_invalid[49m[43m=[49m[43mskip_invalid[49m[43m)[49m)
[32m   2578[39m [38;5;28;01melse[39;00m:
[32m   2579[39m     [38;5;28;01mif[39;00m skip_invalid:

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/graph_objs/layout/updatemenu/_button.py:361[39m, in [36mButton.__init__[39m[34m(self, arg, args, args2, execute, label, method, name, templateitemname, visible, **kwargs)[39m
[32m    359[39m [38;5;28mself[39m._set_property([33m"[39m[33mtemplateitemname[39m[33m"[39m, arg, templateitemname)
[32m    360[39m [38;5;28mself[39m._set_property([33m"[39m[33mvisible[39m[33m"[39m, arg, visible)
[32m--> [39m[32m361[39m [38;5;28;43mself[39;49m[43m.[49m[43m_process_kwargs[49m[43m([49m[43m*[49m[43m*[49m[38;5;28;43mdict[39;49m[43m([49m[43marg[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m[43m)[49m
[32m    362[39m [38;5;28mself[39m._skip_invalid = [38;5;28;01mFalse[39;00m

[36mFile [39m[32m/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/plotly/basedatatypes.py:4470[39m, in [36mBasePlotlyType._process_kwargs[39m[34m(self, **kwargs)[39m
[32m   4468[39m     [38;5;28mself[39m[k] = v
[32m   4469[39m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m._skip_invalid:
[32m-> [39m[32m4470[39m     [38;5;28;01mraise[39;00m err

[31mValueError[39m: Invalid property specified for object of type plotly.graph_objs.layout.updatemenu.Button: 'bgcolor'

Did you mean "label"?

    Valid properties:
        args
            Sets the arguments values to be passed to the Plotly
            method set in `method` on click.
        args2
            Sets a 2nd set of `args`, these arguments values are
            passed to the Plotly method set in `method` when
            clicking this button while in the active state. Use
            this to create toggle buttons.
        execute
            When true, the API method is executed. When false, all
            other behaviors are the same and command execution is
            skipped. This may be useful when hooking into, for
            example, the `plotly_buttonclicked` method and
            executing the API command manually without losing the
            benefit of the updatemenu automatically binding to the
            state of the plot through the specification of `method`
            and `args`.
        label
            Sets the text label to appear on the button.
        method
            Sets the Plotly method to be called on click. If the
            `skip` method is used, the API updatemenu will function
            as normal but will perform no API calls and will not
            bind automatically to state updates. This may be used
            to create a component interface and attach to
            updatemenu events manually via JavaScript.
        name
            When used in a template, named items are created in the
            output figure in addition to any items the figure
            already has in this array. You can modify these items
            in the output figure by making your own item with
            `templateitemname` matching this `name` alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). Has no effect outside of a
            template.
        templateitemname
            Used to refer to a named item in this array in the
            template. Named items from the template will be created
            even without a matching item in the input figure, but
            you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). If there is no template or no
            matching item, this item will be hidden unless you
            explicitly show it with `visible: true`.
        visible
            Determines whether or not this button is visible.
        
Did you mean "label"?

Bad property path:
bgcolor
^^^^^^^

